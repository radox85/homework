
Zadanie średnie: Liczbę antypierwszą definiujemy jako liczbę, która ma więcej dzielników niż każda dodatnia liczba całkowita mniejsza od niej. Napisz program, który dla wskazanego N znajdzie wszystkie liczby antypierwsze z przedziału [1,N]. Określ złożoność obliczeniową Twojego algorytmu.

Zadanie trudne: Napisz program, który znajdzie długość najdłuższego ciągu (niekoniecznie spójnego!) kolejnych liczb w nieposortowanej tablicy. Np. dla tablicy [1, 100, 12, 4, 3, 17, 2] odpowiedzią jest 4 (najdłuższy ciąg: [1, 2, 3, 4]). Określ złożoność obliczeniową Twojego algorytmu.

Zadanie trudne: Zaimplementuj algorytm znajdywania maksymalnej wartości w podanej tablicy losowych intów dwiema metodami:
- prostą metodą liniowego przeszukiwania całej tablicy
- metodą „dziel i rządź”
Czy potrafisz określić złożoność obu metod?

Zadanie trudne: Napisz w Swingu aplikację, która pozwoli na narysowanie wykresu zależności ilości wykonanych porównań od rozmiaru wejściowej tablicy dla trzech algorytmów sortowania: selection sort, merge sort, heap sort. Okienko aplikacji ma zawierać: miejsce na wykres i 3 buttony (każdy z buttonów odpowiada konkretnemu algorytmowi sortowania). Po kliknięciu w dany button powinien wykonać się test polegający na wykonaniu sortowania tablicy losowych intów dla 100 różnych rozmiarów tablicy (np. od 100 do 10000 co 100). Przy każdym sortowaniu należy zliczać ilość wykonanych porównań. W ten sposób otrzymamy zależności wykonanych porównań od rozmiaru tablicy (100 danych). Nie pozostaje nic innego jak narysować wykres :) Wykorzystaj bibliotekę JFreeChart (http://www.jfree.org/jfreechart/). Pobierz zależność do niej z repozytorium Mavena. Przykład tworzenia interesującego nas wykresu znajdziesz np. tutaj: http://www.codejava.net/java-se/graphics/using-jfreechart-to-draw-xy-line-chart-with-xydataset.


Zadanie trudne: Zaimplementuj algorytm, który dla danego napisu wypisze na ekran wszystkie permutacje jego liter. Np. dla napisu „xyz” wypisane powinny zostać: "xyz", "yzx", "zxy", "xzy", "yxz", "zyx"